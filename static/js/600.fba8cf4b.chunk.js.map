{"version":3,"file":"static/js/600.fba8cf4b.chunk.js","mappings":"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","sources":["webpack://TweetTrends/./src/components/ScrollToTopButton/scrollToTopButton.module.css?10ca","components/ScrollToTopButton/ScrollToTopButton.jsx","utils/Api.jsx","webpack://TweetTrends/./src/components/TweetsList/tweestsList.module.css?5c11","components/TweetsList/TweetsList.jsx","utils/addComma.jsx","webpack://TweetTrends/./src/pages/Tweets/tweets.module.css?aeb2","pages/Tweets/Tweets.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"scrollToTopButton\":\"scrollToTopButton_scrollToTopButton__zleS3\",\"visible\":\"scrollToTopButton_visible__DW5CN\",\"iconArrowUp\":\"scrollToTopButton_iconArrowUp__ro8TI\"};","import React, { useState, useEffect } from 'react';\nimport { AiOutlineArrowUp } from 'react-icons/ai';\n\nimport styles from './scrollToTopButton.module.css';\n\nconst ScrollToTopButton = () => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const handleScroll = () => {\n    if (window.pageYOffset > 300) {\n      setIsVisible(true);\n    } else {\n      setIsVisible(false);\n    }\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <>\n      <div\n        className={`${styles.scrollToTopButton} ${\n          isVisible ? styles.visible : ''\n        }`}\n      >\n        <button onClick={scrollToTop}>\n          <AiOutlineArrowUp className={styles.iconArrowUp} />\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default ScrollToTopButton;\n","import axios from 'axios';\n\nexport const getTweets = async () => {\n  try {\n    //? How to upload data from .env to GitHub?\n    // const response = await axios.get(process.env.REACT_APP_BASE_URL);\n\n    const response = await axios.get(\n      'https://6478726a362560649a2dc983.mockapi.io/api/v1/users'\n    );\n\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"tweetsList\":\"tweestsList_tweetsList__U+P1K\",\"item\":\"tweestsList_item__0Iirv\",\"topWrapper\":\"tweestsList_topWrapper__sahjo\",\"clouds\":\"tweestsList_clouds__rXHNw\",\"goitLogo\":\"tweestsList_goitLogo__3UR4Y\",\"separator\":\"tweestsList_separator__CLXfB\",\"bagel\":\"tweestsList_bagel__zQsQP\",\"avatar\":\"tweestsList_avatar__5rWuY\",\"downWrapper\":\"tweestsList_downWrapper__pHYyB\",\"tweets\":\"tweestsList_tweets__rdgvU\",\"followers\":\"tweestsList_followers__ZrEOU\",\"button\":\"tweestsList_button__s1Lev\",\"follow\":\"tweestsList_follow__zX0Vb\",\"followText\":\"tweestsList_followText__uo1N0\",\"following\":\"tweestsList_following__lZk-q\",\"linkWrap\":\"tweestsList_linkWrap__K8uma\",\"goBackLink\":\"tweestsList_goBackLink__emksE\",\"filterContainer\":\"tweestsList_filterContainer__cZogf\",\"iconFilter\":\"tweestsList_iconFilter__KmL83\",\"loadMoreButton\":\"tweestsList_loadMoreButton__7PvkZ\"};","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { AiFillFilter } from 'react-icons/ai';\n\nimport * as API from '../../utils/Api';\nimport { addComma } from '../../utils/addComma';\n\nimport photoNotFound from '../../utils/images/photo-not-found.jpg';\nimport clouds from '../../utils/images/clouds.png';\nimport goit from '../../utils/images/goit.png';\n\nimport styles from './tweestsList.module.css';\n\nexport const TweetsList = React.memo(() => {\n  const [tweets, setTweets] = useState([]);\n  const [filter, setFilter] = useState('show all');\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const tweetsPerPage = 3;\n\n  useEffect(() => {\n    const savedState = JSON.parse(localStorage.getItem('tweetsState'));\n\n    if (savedState && savedState.length > 0) {\n      setTweets(savedState);\n    } else {\n      API.getTweets().then(data => setTweets(data));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (tweets.length > 0) {\n      localStorage.setItem('tweetsState', JSON.stringify(tweets));\n    }\n  }, [tweets]);\n\n  const handleFollowButtonClick = userId => {\n    setTweets(prevTweets =>\n      prevTweets.map(tweet => {\n        if (tweet.id === userId) {\n          const newFollowers =\n            parseInt(tweet.followers, 10) + (tweet.isFollowing ? -1 : 1);\n\n          return {\n            ...tweet,\n            isFollowing: !tweet.isFollowing,\n            followers: newFollowers.toString(),\n          };\n        }\n        return tweet;\n      })\n    );\n  };\n\n  const filteredTweets = applyFilter(tweets, filter);\n\n  function applyFilter(tweets, filter) {\n    if (filter === 'show all') {\n      return tweets;\n    } else if (filter === 'follow') {\n      return tweets.filter(tweet => !tweet.isFollowing);\n    } else if (filter === 'followings') {\n      return tweets.filter(tweet => tweet.isFollowing);\n    }\n    return tweets;\n  }\n\n  const handleFilterChange = e => {\n    setFilter(e.target.value);\n  };\n\n  const handleLoadMore = () => {\n    setCurrentPage(prevPage => prevPage + 1);\n  };\n\n  const indexOfLastTweet = currentPage * tweetsPerPage;\n  const currentTweets = filteredTweets.slice(0, indexOfLastTweet);\n\n  return (\n    <>\n      <div className={styles.linkWrap}>\n        <Link to=\"/\" className={styles.goBackLink}>\n          &lt; Go Back\n        </Link>\n        <div className={styles.filterContainer}>\n          <label htmlFor=\"filter\">\n            <AiFillFilter className={styles.iconFilter} />\n          </label>\n          <select id=\"filter\" value={filter} onChange={handleFilterChange}>\n            <option value=\"show all\">Show All</option>\n            <option value=\"follow\">Follow</option>\n            <option value=\"followings\">Followings</option>\n          </select>\n        </div>\n      </div>\n\n      <ul className={styles.tweetsList}>\n        {currentTweets.map(\n          ({ id, user, tweets, followers, avatar, isFollowing }) => {\n            const followersWithComma = addComma(followers);\n            const followButtonText = isFollowing ? 'FOLLOWING' : 'FOLLOW';\n            const followButtonClass = isFollowing\n              ? styles.following\n              : styles.follow;\n\n            return (\n              <li key={id} className={styles.item}>\n                <div className={styles.topWrapper}>\n                  <img\n                    className={styles.clouds}\n                    src={clouds}\n                    alt=\"Clouds with a question mark and a progress bar\"\n                    loading=\"lazy\"\n                  />\n                  <img\n                    className={styles.goitLogo}\n                    src={goit}\n                    alt=\"The logo of GoIT company\"\n                    loading=\"lazy\"\n                  />\n                </div>\n                <div className={styles.separator}>\n                  <div className={styles.bagel}></div>\n                  <img\n                    className={styles.avatar}\n                    src={avatar ? avatar : photoNotFound}\n                    alt={user}\n                    title={user}\n                    loading=\"lazy\"\n                  />\n                </div>\n                <div className={styles.downWrapper}>\n                  <p className={styles.tweets}>{`${tweets} TWEETS`}</p>\n                  <p\n                    className={styles.followers}\n                  >{`${followersWithComma} FOLLOWERS`}</p>\n                  <button\n                    className={`${styles.button} ${followButtonClass}`}\n                    onClick={() => handleFollowButtonClick(id)}\n                  >\n                    <p className={styles.followText}>{followButtonText}</p>\n                  </button>\n                </div>\n              </li>\n            );\n          }\n        )}\n      </ul>\n\n      {currentTweets.length < filteredTweets.length && (\n        <button className={styles.loadMoreButton} onClick={handleLoadMore}>\n          Load More\n        </button>\n      )}\n    </>\n  );\n});\n","export const addComma = number => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"tweetsSection\":\"tweets_tweetsSection__t2rfU\"};","import ScrollToTopButton from 'components/ScrollToTopButton/ScrollToTopButton';\nimport { TweetsList } from 'components/TweetsList/TweetsList';\n\nimport styles from './tweets.module.css';\n\nconst Tweets = () => {\n  return (\n    <section className={styles.tweetsSection}>\n      <TweetsList />\n      <ScrollToTopButton />\n    </section>\n  );\n};\nexport default Tweets;\n"],"names":["useState","isVisible","setIsVisible","handleScroll","window","pageYOffset","useEffect","addEventListener","removeEventListener","className","styles","onClick","scrollTo","top","behavior","getTweets","axios","response","data","console","error","TweetsList","React","tweets","setTweets","filter","setFilter","currentPage","setCurrentPage","savedState","JSON","parse","localStorage","getItem","length","API","then","setItem","stringify","filteredTweets","tweet","isFollowing","applyFilter","indexOfLastTweet","currentTweets","slice","to","htmlFor","id","value","onChange","e","target","map","user","followers","avatar","followersWithComma","toString","replace","followButtonText","followButtonClass","src","clouds","alt","loading","goit","photoNotFound","title","userId","prevTweets","newFollowers","parseInt","prevPage"],"sourceRoot":""}