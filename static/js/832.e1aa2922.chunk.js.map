{"version":3,"file":"static/js/832.e1aa2922.chunk.js","mappings":"+OAEaA,EAAS,mCAAG,6GAEEC,EAAAA,EAAAA,IACrB,4DAHmB,cAEfC,EAFe,yBAMdA,EAASC,MANK,gCAQrBC,QAAQC,MAAR,MARqB,yDAAH,qD,2BCDtB,EAA6B,gCAA7B,EAAoE,0BAApE,EAA2G,gCAA3G,EAAoJ,4BAApJ,EAA2L,8BAA3L,EAAqO,+BAArO,EAA4Q,2BAA5Q,EAAgT,4BAAhT,EAA0V,iCAA1V,EAAoY,4BAApY,EAA4a,+BAA5a,EAAod,4BAApd,EAAyf,4BAAzf,EAAkiB,gCAAliB,EAA8kB,+BAA9kB,EAAwnB,8BAAxnB,EAAmqB,gCAAnqB,EAAqtB,qCAArtB,EAAuwB,gCAAvwB,EAAwzB,oC,SCY3yBC,EAAaC,EAAAA,MAAW,WACnC,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,UAAS,YAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAsCJ,EAAAA,EAAAA,UAAS,GAA/C,eAAOK,EAAP,KAAoBC,EAApB,MAGAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,gBAE/CJ,GAAcA,EAAWK,OAAS,EACpCX,EAAUM,GAEVM,IAAgBC,MAAK,SAAApB,GAAI,OAAIO,EAAUP,EAAd,GAE5B,GAAE,KAEHY,EAAAA,EAAAA,YAAU,WACJN,EAAOY,OAAS,GAClBF,aAAaK,QAAQ,cAAeP,KAAKQ,UAAUhB,GAEtD,GAAE,CAACA,IAEJ,IAkBMiB,EAEN,SAAqBjB,EAAQE,GAC3B,GAAe,aAAXA,EACF,OAAOF,EACF,GAAe,WAAXE,EACT,OAAOF,EAAOE,QAAO,SAAAgB,GAAK,OAAKA,EAAMC,WAAX,IACrB,GAAe,eAAXjB,EACT,OAAOF,EAAOE,QAAO,SAAAgB,GAAK,OAAIA,EAAMC,WAAV,IAE5B,OAAOnB,CACR,CAXsBoB,CAAYpB,EAAQE,GAa3C,IAQMmB,EAzDgB,EAyDGjB,EACnBkB,EAAgBL,EAAeM,MAAM,EAAGF,GAE9C,OACE,iCACE,iBAAKG,UAAWC,EAAhB,WACE,SAAC,KAAD,CAAMC,GAAG,IAAIF,UAAWC,EAAxB,wBAGA,iBAAKD,UAAWC,EAAhB,WACE,kBAAOE,QAAQ,SAAf,UACE,SAAC,MAAD,CAAcH,UAAWC,OAE3B,oBAAQG,GAAG,SAASC,MAAO3B,EAAQ4B,SArBhB,SAAAC,GACzB5B,EAAU4B,EAAEC,OAAOH,MACpB,EAmBO,WACE,mBAAQA,MAAM,WAAd,uBACA,mBAAQA,MAAM,SAAd,qBACA,mBAAQA,MAAM,aAAd,kCAKN,eAAIL,UAAWC,EAAf,SACGH,EAAcW,KACb,YAA2D,IAAxDL,EAAuD,EAAvDA,GAAIM,EAAmD,EAAnDA,KAAMlC,EAA6C,EAA7CA,OAAQmC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,OAAQjB,EAAkB,EAAlBA,YAChCkB,EAA8BF,ECjGhCG,WAAWC,QAAQ,wBAAyB,KDkG1CC,EAAmBrB,EAAc,YAAc,SAC/CsB,EAAoBtB,EACtBM,EACAA,EAEJ,OACE,gBAAaD,UAAWC,EAAxB,WACE,iBAAKD,UAAWC,EAAhB,WACE,gBACED,UAAWC,EACXiB,IAAKC,EACLC,IAAI,iDACJC,QAAQ,UAEV,gBACErB,UAAWC,EACXiB,IAAKI,EACLF,IAAI,2BACJC,QAAQ,aAGZ,iBAAKrB,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,KAChB,gBACED,UAAWC,EACXiB,IAAKN,GAAkBW,EACvBH,IAAKV,EACLc,MAAOd,EACPW,QAAQ,aAGZ,iBAAKrB,UAAWC,EAAhB,WACE,cAAGD,UAAWC,EAAd,mBAAiCzB,EAAjC,cACA,cACEwB,UAAWC,EADb,mBAEKY,EAFL,iBAGA,mBACEb,UAAS,UAAKC,EAAL,YAAsBgB,GAC/BQ,QAAS,kBAtGKC,EAsGyBtB,OArGvD3B,GAAU,SAAAkD,GAAU,OAClBA,EAAWlB,KAAI,SAAAf,GACb,GAAIA,EAAMU,KAAOsB,EAAQ,CACvB,IAAME,EACJC,SAASnC,EAAMiB,UAAW,KAAOjB,EAAMC,aAAe,EAAI,GAE5D,OAAO,kBACFD,GADL,IAEEC,aAAcD,EAAMC,YACpBgB,UAAWiB,EAAad,YAE3B,CACD,OAAOpB,CACR,GAbiB,IADU,IAAAgC,CAsGL,EAFX,UAIE,cAAG1B,UAAWC,EAAd,SAAkCe,WAlC/BZ,EAuCZ,MAIJN,EAAcV,OAASK,EAAeL,SACrC,mBAAQY,UAAWC,EAAuBwB,QA/EzB,WACrB5C,GAAe,SAAAiD,GAAQ,OAAIA,EAAW,CAAf,GACxB,EA6EK,yBAMP,IE1JD,EAAgC,8BCUhC,EAPe,WACb,OACE,oBAAS9B,UAAWC,EAApB,UACE,SAAC5B,EAAD,KAGL,C","sources":["utils/Api.jsx","webpack://TweetTrends/./src/components/TweetsList/tweestsList.module.css?5c11","components/TweetsList/TweetsList.jsx","utils/addComma.jsx","webpack://TweetTrends/./src/pages/Tweets/tweets.module.css?aeb2","pages/Tweets/Tweets.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const getTweets = async () => {\n  try {\n    const response = await axios.get(\n      'https://6478726a362560649a2dc983.mockapi.io/api/v1/users'\n    );\n\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"tweetsList\":\"tweestsList_tweetsList__U+P1K\",\"item\":\"tweestsList_item__0Iirv\",\"topWrapper\":\"tweestsList_topWrapper__sahjo\",\"clouds\":\"tweestsList_clouds__rXHNw\",\"goitLogo\":\"tweestsList_goitLogo__3UR4Y\",\"separator\":\"tweestsList_separator__CLXfB\",\"bagel\":\"tweestsList_bagel__zQsQP\",\"avatar\":\"tweestsList_avatar__5rWuY\",\"downWrapper\":\"tweestsList_downWrapper__pHYyB\",\"tweets\":\"tweestsList_tweets__rdgvU\",\"followers\":\"tweestsList_followers__ZrEOU\",\"button\":\"tweestsList_button__s1Lev\",\"follow\":\"tweestsList_follow__zX0Vb\",\"followText\":\"tweestsList_followText__uo1N0\",\"following\":\"tweestsList_following__lZk-q\",\"linkWrap\":\"tweestsList_linkWrap__K8uma\",\"goBackLink\":\"tweestsList_goBackLink__emksE\",\"filterContainer\":\"tweestsList_filterContainer__cZogf\",\"iconFilter\":\"tweestsList_iconFilter__KmL83\",\"loadMoreButton\":\"tweestsList_loadMoreButton__7PvkZ\"};","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { AiFillFilter } from 'react-icons/ai';\n\nimport * as API from '../../utils/Api';\nimport { addComma } from '../../utils/addComma';\n\nimport photoNotFound from '../../utils/images/photo-not-found.jpg';\nimport clouds from '../../utils/images/clouds.png';\nimport goit from '../../utils/images/goit.png';\n\nimport styles from './tweestsList.module.css';\n\nexport const TweetsList = React.memo(() => {\n  const [tweets, setTweets] = useState([]);\n  const [filter, setFilter] = useState('show all');\n  const [currentPage, setCurrentPage] = useState(1);\n  const tweetsPerPage = 6;\n\n  useEffect(() => {\n    const savedState = JSON.parse(localStorage.getItem('tweetsState'));\n\n    if (savedState && savedState.length > 0) {\n      setTweets(savedState);\n    } else {\n      API.getTweets().then(data => setTweets(data));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (tweets.length > 0) {\n      localStorage.setItem('tweetsState', JSON.stringify(tweets));\n    }\n  }, [tweets]);\n\n  const handleFollowButtonClick = userId => {\n    setTweets(prevTweets =>\n      prevTweets.map(tweet => {\n        if (tweet.id === userId) {\n          const newFollowers =\n            parseInt(tweet.followers, 10) + (tweet.isFollowing ? -1 : 1);\n\n          return {\n            ...tweet,\n            isFollowing: !tweet.isFollowing,\n            followers: newFollowers.toString(),\n          };\n        }\n        return tweet;\n      })\n    );\n  };\n\n  const filteredTweets = applyFilter(tweets, filter);\n\n  function applyFilter(tweets, filter) {\n    if (filter === 'show all') {\n      return tweets;\n    } else if (filter === 'follow') {\n      return tweets.filter(tweet => !tweet.isFollowing);\n    } else if (filter === 'followings') {\n      return tweets.filter(tweet => tweet.isFollowing);\n    }\n    return tweets;\n  }\n\n  const handleFilterChange = e => {\n    setFilter(e.target.value);\n  };\n\n  const handleLoadMore = () => {\n    setCurrentPage(prevPage => prevPage + 1);\n  };\n\n  const indexOfLastTweet = currentPage * tweetsPerPage;\n  const currentTweets = filteredTweets.slice(0, indexOfLastTweet);\n\n  return (\n    <>\n      <div className={styles.linkWrap}>\n        <Link to=\"/\" className={styles.goBackLink}>\n          &lt; Go Back\n        </Link>\n        <div className={styles.filterContainer}>\n          <label htmlFor=\"filter\">\n            <AiFillFilter className={styles.iconFilter} />\n          </label>\n          <select id=\"filter\" value={filter} onChange={handleFilterChange}>\n            <option value=\"show all\">Show All</option>\n            <option value=\"follow\">Follow</option>\n            <option value=\"followings\">Followings</option>\n          </select>\n        </div>\n      </div>\n\n      <ul className={styles.tweetsList}>\n        {currentTweets.map(\n          ({ id, user, tweets, followers, avatar, isFollowing }) => {\n            const followersWithComma = addComma(followers);\n            const followButtonText = isFollowing ? 'FOLLOWING' : 'FOLLOW';\n            const followButtonClass = isFollowing\n              ? styles.following\n              : styles.follow;\n\n            return (\n              <li key={id} className={styles.item}>\n                <div className={styles.topWrapper}>\n                  <img\n                    className={styles.clouds}\n                    src={clouds}\n                    alt=\"Clouds with a question mark and a progress bar\"\n                    loading=\"lazy\"\n                  />\n                  <img\n                    className={styles.goitLogo}\n                    src={goit}\n                    alt=\"The logo of GoIT company\"\n                    loading=\"lazy\"\n                  />\n                </div>\n                <div className={styles.separator}>\n                  <div className={styles.bagel}></div>\n                  <img\n                    className={styles.avatar}\n                    src={avatar ? avatar : photoNotFound}\n                    alt={user}\n                    title={user}\n                    loading=\"lazy\"\n                  />\n                </div>\n                <div className={styles.downWrapper}>\n                  <p className={styles.tweets}>{`${tweets} TWEETS`}</p>\n                  <p\n                    className={styles.followers}\n                  >{`${followersWithComma} FOLLOWERS`}</p>\n                  <button\n                    className={`${styles.button} ${followButtonClass}`}\n                    onClick={() => handleFollowButtonClick(id)}\n                  >\n                    <p className={styles.followText}>{followButtonText}</p>\n                  </button>\n                </div>\n              </li>\n            );\n          }\n        )}\n      </ul>\n\n      {currentTweets.length < filteredTweets.length && (\n        <button className={styles.loadMoreButton} onClick={handleLoadMore}>\n          Load More\n        </button>\n      )}\n    </>\n  );\n});\n","export const addComma = number => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"tweetsSection\":\"tweets_tweetsSection__t2rfU\"};","import { TweetsList } from 'components/TweetsList/TweetsList';\n\nimport styles from './tweets.module.css';\n\nconst Tweets = () => {\n  return (\n    <section className={styles.tweetsSection}>\n      <TweetsList />\n    </section>\n  );\n};\nexport default Tweets;\n"],"names":["getTweets","axios","response","data","console","error","TweetsList","React","useState","tweets","setTweets","filter","setFilter","currentPage","setCurrentPage","useEffect","savedState","JSON","parse","localStorage","getItem","length","API","then","setItem","stringify","filteredTweets","tweet","isFollowing","applyFilter","indexOfLastTweet","currentTweets","slice","className","styles","to","htmlFor","id","value","onChange","e","target","map","user","followers","avatar","followersWithComma","toString","replace","followButtonText","followButtonClass","src","clouds","alt","loading","goit","photoNotFound","title","onClick","userId","prevTweets","newFollowers","parseInt","prevPage"],"sourceRoot":""}